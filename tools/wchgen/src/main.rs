use std::io::{BufRead, BufReader, Error, ErrorKind, Result};
use std::{fs, path};

const AUTOGEN_HEADER: &'static str = r"
// This file was automatically generated by wchgen. More information at:
//
// https://github.com/dadleyy/orient-beetle/tree/master/tools/wchgen
";

fn main() -> Result<()> {
  let target = std::env::args()
    .skip(1)
    .next()
    .ok_or_else(|| Error::new(ErrorKind::Other, "please provide a target"))?;

  let p = path::PathBuf::from(&target);

  if p.is_file() != true {
    let error = format!("'{}' is not a valid file", target);
    return Err(Error::new(ErrorKind::Other, error));
  }

  let handle = fs::File::open(p)?;
  let reader = BufReader::new(handle);
  let min = reader
    .lines()
    .fold(String::with_capacity(1024), |mut out, line| match line {
      Ok(valid) => {
        out.push_str(valid.trim_start().trim_end());
        out.replace("\"", "'")
      }
      Err(_) => out,
    });

  let formatted = format!(
    r#"{}const char * index_html PROGMEM = "HTTP/1.1 200 Ok\r\nContent-Length: {}\r\n\r\n{}";"#,
    AUTOGEN_HEADER,
    min.len(),
    min
  );

  println!("{}", formatted);

  Ok(())
}
