name: build-and-publish
on:
  push:
    branches:
      - "*"
    tags:
      - "v*"
jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/beetle-srv
    steps:
      - uses: actions/checkout@v3

      - name: "install clippy"
        run: rustup component add clippy
      - name: "build"
        run: cargo build
      - name: "clippy"
        run: cargo clippy
      - name: "test"
        run: cargo test

  build-pio:
    runs-on: ubuntu-latest
    env:
      BEETLE_GPG_KEY: "${{ secrets.BEETLE_CI_GPG }}"
      REDIS_HOST: "${{ secrets.PIO_REDIS_HOST }}"
      REDIS_PORT: "${{ secrets.PIO_REDIS_PORT }}"
      REDIS_AUTH_USERNAME: "${{ secrets.PIO_REDIS_AUTH_USERNAME }}"
      REDIS_AUTH_PASSWORD: "${{ secrets.PIO_REDIS_AUTH_PASSWORD }}"
      DISTRIBUTABLE_DIRECTORY_NAME: "beetle-pio-dist"
    defaults:
      run:
        working-directory: src/beetle-pio
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - name: "set output: short_sha"
        id: vars
        run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | head -c 7)">>$GITHUB_OUTPUT

      - name: "import gpg"
        run: |
          echo "${{ secrets.BEETLE_CI_GPG }}" > orient-beetle-ci.key
          gpg --import orient-beetle-ci.key
          rm orient-beetle-ci.key

      - name: "pip: upgrade"
        run: python -m pip install --upgrade pip

      - name: "pip: install pio"
        run: pip install --upgrade platformio

      - name: "env prep: fill redis ca"
        run: echo $REDIS_HOST_ROOT_CA > embeds/redis_host_root_ca.pem

      - name: "pio: check"
        run: pio check

      - name: "pio(firebeetle): run firebeetle"
        run: pio run -e firebeetle

      - name: "bundle(firebeetle): prepare-dir"
        run: mkdir -p $DISTRIBUTABLE_DIRECTORY_NAME/firebeetle

      - name: "bundle(firebeetle): copy-bin"
        run: |
          gpg --trust-model always -e -r 99D22D47AA5053FC -o \
            $DISTRIBUTABLE_DIRECTORY_NAME/firebeetle/firmware.bin.pgp \
            .pio/build/firebeetle/firmware.bin

      - name: "bundle(firebeetle): copy-map"
        run: |
          gpg --trust-model always -e -r 99D22D47AA5053FC -o \
            $DISTRIBUTABLE_DIRECTORY_NAME/firebeetle/firmware.map.pgp \
            .pio/build/firebeetle/firmware.map

      - name: "bundle(firebeetle): copy-elf"
        run: |
          gpg --trust-model always -e -r 99D22D47AA5053FC -o \
            $DISTRIBUTABLE_DIRECTORY_NAME/firebeetle/firmware.elf.pgp \
            .pio/build/firebeetle/firmware.elf

      - name: "bundle(firebeetle): copy-partitions"
        run: |
          gpg --trust-model always -e -r 99D22D47AA5053FC -o \
            $DISTRIBUTABLE_DIRECTORY_NAME/firebeetle/partitions.bin.pgp \
            .pio/build/firebeetle/partitions.bin

      - name: "pio(xiao): upgrade"
        run: pio upgrade

      - name: "pio(xiao): pkg update"
        run: pio pkg update

      - name: "pio(xiao): run xiao"
        run: pio run -e xiao

      - name: "bundle(xiao): prepare-dir"
        run: mkdir -p $DISTRIBUTABLE_DIRECTORY_NAME/xiao

      - name: "bundle(xiao): copy-bin"
        run: |
          gpg --trust-model always -e -r 99D22D47AA5053FC -o \
            $DISTRIBUTABLE_DIRECTORY_NAME/xiao/firmware.bin.pgp \
            .pio/build/xiao/firmware.bin

      - name: "bundle(xiao): copy-map"
        run: |
          gpg --trust-model always -e -r 99D22D47AA5053FC -o \
            $DISTRIBUTABLE_DIRECTORY_NAME/xiao/firmware.map.pgp \
            .pio/build/xiao/firmware.map

      - name: "bundle(xiao): copy-elf"
        run: |
          gpg --trust-model always -e -r 99D22D47AA5053FC -o \
            $DISTRIBUTABLE_DIRECTORY_NAME/xiao/firmware.elf.pgp \
            .pio/build/xiao/firmware.elf

      - name: "bundle(xiao): copy-partitions"
        run: |
          gpg --trust-model always -e -r 99D22D47AA5053FC -o \
            $DISTRIBUTABLE_DIRECTORY_NAME/xiao/partitions.bin.pgp \
            .pio/build/xiao/partitions.bin

      - name: "bundle(xiao): copy-apploader"
        run: |
          ls -lah $HOME/.platformio
          ls -lah $HOME/.platformio/packages/
          ls -lah $HOME/.platformio/packages/framework-arduinoespressif32
          ls -lah $HOME/.platformio/packages/framework-arduinoespressif32/tools
          ls -lah $HOME/.platformio/packages/framework-arduinoespressif32/tools/partitions
          gpg --trust-model always -e -r 99D22D47AA5053FC -o \
            $DISTRIBUTABLE_DIRECTORY_NAME/xiao/boot_app0.bin.pgp \
            $HOME/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin

      - name: "bundle: copy instruction"
        run: |
          cp -v $GITHUB_WORKSPACE/.automation/firmware-instructions/flashing-xiao.txt \
                $DISTRIBUTABLE_DIRECTORY_NAME

      - name: "bundle: create"
        run: tar cvzf beetle-pio-${{ steps.vars.outputs.sha_short }}.tar.gz $DISTRIBUTABLE_DIRECTORY_NAME

      - uses: actions/upload-artifact@v3
        with:
          name: "beetle-pio-${{ steps.vars.outputs.sha_short }}.tar.gz"
          path: "./src/beetle-pio/beetle-pio-${{ steps.vars.outputs.sha_short }}.tar.gz"

  build-ui:
    runs-on: ubuntu-latest
    env:
      BEETLE_VERSION: "${{ github.sha }}"
      # note: These are specific paths related to nginx hosting config. When developing locally,
      # it is more likely you will be serving from a root `/`.
      BEETLE_UI_ROOT: "/beetle/"
      BEETLE_API_ROOT: "/beetle/api/"
      BEETLE_LOGIN_URL: "https://www.krumpled.com/beetle/api/auth/redirect"
    defaults:
      run:
        working-directory: src/beetle-ui
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: "set output: short_sha"
        id: vars
        run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | head -c 7)">>$GITHUB_OUTPUT

      - name: "install elm: download"
        run: curl -L -o elm.gz https://github.com/elm/compiler/releases/download/0.19.1/binary-for-linux-64-bit.gz

      - name: "install elm: unpack"
        run: gunzip elm.gz && chmod +x elm

      - name: "install elm: install"
        run: sudo mv elm /usr/local/bin/

      - name: "install elm: verison"
        run: elm --version

      - name: "install node-deps"
        run: npm i

      - name: "lint: ts"
        run: npm run lint:ts

      - name: "lint: elm"
        run: npm run lint:elm -- --validate

      - name: "make: release"
        run: make release

      - name: "bundle: prepare"
        run: mv target/release beetle-ui-dist

      - name: "bundle: create"
        run: tar cvzf beetle-ui-${{ steps.vars.outputs.sha_short }}.tar.gz beetle-ui-dist

      - uses: actions/upload-artifact@v3
        with:
          name: "beetle-ui-${{ steps.vars.outputs.sha_short }}.tar.gz"
          path: "./src/beetle-ui/beetle-ui-${{ steps.vars.outputs.sha_short }}.tar.gz"

  build-srv-osx:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-12
    env:
      BEETLE_VERSION: "${{ github.sha }}"
    defaults:
      run:
        working-directory: src/beetle-srv
    steps:
      - uses: actions/checkout@v3
      - name: "set output: short_sha"
        id: vars
        run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | head -c 7)">>$GITHUB_OUTPUT
      - name: "build"
        run: cargo build --release
      - name: "bundle: prepare"
        run: mkdir -p beetle-server-dist/bin
      - name: "bundle: cli"
        run: cp target/release/beetle-cli beetle-server-dist/bin/beetle-cli
      - name: "bundle: create"
        run: tar cvzf beetle-server-osx-${{ steps.vars.outputs.sha_short }}.tar.gz beetle-server-dist
      - uses: actions/upload-artifact@v3
        with:
          name: "beetle-server-osx-${{ steps.vars.outputs.sha_short }}.tar.gz"
          path: "./src/beetle-srv/beetle-server-osx-${{ steps.vars.outputs.sha_short }}.tar.gz"

  build-srv-armv7:
    runs-on: ubuntu-latest
    env:
      BEETLE_VERSION: "${{ github.sha }}"
      DISTRIBUTABLE_DIRECTORY_NAME: "beetle-server-dist"
    container:
      image: dadleyy/rust-raspberry-pi-openssl:latest
    defaults:
      run:
        working-directory: src/beetle-srv
    steps:
      - uses: actions/checkout@v3
      - name: "set output: short_sha"
        id: vars
        run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | head -c 7)">>$GITHUB_OUTPUT

      - name: "cargo: build"
        run: cargo build --target armv7-unknown-linux-gnueabihf --release
        env:
          OPENSSL_LIB_DIR: /tmp/openssl-1.1.1g/
          OPENSSL_INCLUDE_DIR: /tmp/openssl-1.1.1g/include

      - name: "bundle: prepare"
        run: mkdir -p $DISTRIBUTABLE_DIRECTORY_NAME/bin

      - name: "populate-bundle: cli"
        run: |
          cp -v target/armv7-unknown-linux-gnueabihf/release/beetle-cli \
                $DISTRIBUTABLE_DIRECTORY_NAME/bin/beetle-cli

      - name: "populate-bundle: web"
        run: |
          cp -v target/armv7-unknown-linux-gnueabihf/release/beetle-web \
                $DISTRIBUTABLE_DIRECTORY_NAME/bin/beetle-web

      - name: "populate-bundle: registrar"
        run: |
          cp -v target/armv7-unknown-linux-gnueabihf/release/beetle-registrar \
                $DISTRIBUTABLE_DIRECTORY_NAME/bin/beetle-registrar

      - name: "bundle: create"
        run: |
          tar cvzf beetle-server-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.sha_short }}.tar.gz \
                   $DISTRIBUTABLE_DIRECTORY_NAME

      - uses: actions/upload-artifact@v3
        with:
          name: "beetle-server-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.sha_short }}.tar.gz"
          path: "./src/beetle-srv/beetle-server-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.sha_short }}.tar.gz"

  build-updater:
    runs-on: ubuntu-latest
    container:
      image: dadleyy/rust-raspberry-pi-openssl:latest
    defaults:
      run:
        working-directory: tools/beetle-updater
    env:
      DISTRIBUTABLE_DIRECTORY_NAME: "beetle-updater-dist"
    steps:
      - uses: actions/checkout@v3

      - name: "set output: short_sha"
        id: vars
        run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | head -c 7)">>$GITHUB_OUTPUT

      - name: "clippy: install"
        run: rustup component add clippy

      - name: "clippy: run"
        run: cargo clippy

      - name: "build"
        run: cargo build --target armv7-unknown-linux-gnueabihf --release
        env:
          OPENSSL_LIB_DIR: /tmp/openssl-1.1.1g/
          OPENSSL_INCLUDE_DIR: /tmp/openssl-1.1.1g/include
          BEETLE_UPDATER_VERSION: ${{ steps.vars.outputs.sha_short }}

      - name: "bundle: prepare"
        run: mkdir -p $DISTRIBUTABLE_DIRECTORY_NAME/bin

      - name: "bundle: populate"
        run: |
          cp -v target/armv7-unknown-linux-gnueabihf/release/beetle-srv-updater \
                $DISTRIBUTABLE_DIRECTORY_NAME/bin/

      - name: "bundle: create"
        run: |
          tar cvzf beetle-updater-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.sha_short }}.tar.gz \
                   $DISTRIBUTABLE_DIRECTORY_NAME

      - uses: actions/upload-artifact@v3
        with:
          name: "beetle-updater-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.sha_short }}.tar.gz"
          path: "./tools/beetle-updater/beetle-updater-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.sha_short }}.tar.gz"

  publish:
    runs-on: ubuntu-latest
    needs: ["build-srv-armv7", "build-srv-osx", "build-ui", "build-pio", "build-updater"]
    steps:
      - uses: actions/checkout@v3

      - name: "set output: short_sha"
        id: vars
        run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | head -c 7)">>$GITHUB_OUTPUT

      - uses: actions/download-artifact@v3
        with:
          name: "beetle-updater-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.sha_short }}.tar.gz"

      - uses: actions/download-artifact@v3
        with:
          name: "beetle-server-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.sha_short }}.tar.gz"

      - uses: actions/download-artifact@v3
        with:
          name: "beetle-ui-${{ steps.vars.outputs.sha_short }}.tar.gz"

      - uses: actions/download-artifact@v3
        with:
          name: "beetle-pio-${{ steps.vars.outputs.sha_short }}.tar.gz"

      - name: printall
        run: ls -lah

      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "./*.tar.gz"
          generate_release_notes: true
          body_path: ${{ github.workspace }}/.automation/release-body.md
